import telebot
import database
import buttons
from telebot import types

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot('7823412148:AAGcosvKg7pHNRY4Jgcnzwn8ZgdUsQ7fyh4')
# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
users = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if database.check_user(user_id):
        products = database.get_pr_buttons()
        bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(products))
    else:
        bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, '
                                  '–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è!',
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        bot.register_next_step_handler(message, get_name)


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
def get_name(message):
    user_id = message.from_user.id
    user_name = message.text

    bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!',
                     reply_markup=buttons.num_button())
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    bot.register_next_step_handler(message, get_num, user_name)


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
def get_num(message, user_name):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ
    if message.contact:
        print(message.contact)
        user_num = message.contact.phone_number
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —é–∑–µ—Ä–∞
        database.register(user_id, user_name, user_num)
        bot.send_message(user_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        products = database.get_pr_buttons()
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(products))
    # –ï—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    else:
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!')
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        bot.register_next_step_handler(message, get_num, user_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(lambda call: call.data in ['decrement', 'increment', 'to_cart', 'back'])
def choose_count(call):
    user_id = call.message.chat.id

    if call.data == 'increment':
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                      reply_markup=buttons.choose_pr_count(
                                          database.get_exact_pr(
                                          users[user_id]['pr_name'])[3],
                                          'increment',
                                          users[user_id]['pr_count']))
        users[user_id]['pr_count'] += 1
    elif call.data == 'decrement':
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                      reply_markup=buttons.choose_pr_count(
                                          database.get_exact_pr(
                                          users[user_id]['pr_name'])[3],
                                          'decrement',
                                          users[user_id]['pr_count']))
        users[user_id]['pr_count'] -= 1
    elif call.data == 'to_cart':
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        pr_name = database.get_exact_pr(users[user_id]['pr_name'])[1]
        database.add_to_cart(user_id, pr_name, users[user_id]['pr_count'])
        bot.send_message(user_id, '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(database.get_pr_buttons()))
    elif call.data == 'back':
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(database.get_pr_buttons()))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(lambda call: call.data in ['cart', 'clear', 'order'])
def cart_handle(call):
    user_id = call.message.chat.id
    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n'

    if call.data == 'cart':
        user_cart = database.show_cart(user_id)
        total = 0.0

        for i in user_cart:
            text += (f'–¢–æ–≤–∞—Ä: {i[1]}\n'
                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i[2]}\n'
                     f'------------------------\n')
            total += database.get_exact_price(i[1]) * i[2]
        text += f'–ò—Ç–æ–≥–æ: {round(total, 2)}'
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        bot.send_message(user_id, text, reply_markup=buttons.cart_buttons())
    elif call.data == 'clear':
        database.clear_cart(user_id)
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(database.get_pr_buttons()))
    elif call.data == 'order':
        text = text.replace('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:', f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ö–ª–∏–µ–Ω—Ç @{call.message.chat.username}\n')
        user_cart = database.show_cart(user_id)
        total = 0.0

        for i in user_cart:
            text += (f'–¢–æ–≤–∞—Ä: {i[1]}\n'
                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i[2]}\n'
                     f'------------------------\n')
            total += database.get_exact_price(i[1]) * i[2]
        text += f'–ò—Ç–æ–≥–æ: {round(total, 2)}'
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑!',
                         reply_markup=buttons.loc_button())
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
        bot.register_next_step_handler(call.message, get_loc, text)


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
def get_loc(message, text):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    if message.location:
        bot.send_message('211029038', text)
        bot.send_location('211029038', latitude=message.location.latitude,
                          longitude=message.location.longitude)
        database.make_order(user_id)
        database.clear_cart(user_id)
        bot.send_message(user_id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!',
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                         reply_markup=buttons.main_menu(database.get_pr_buttons()))
    else:
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ!')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
        bot.register_next_step_handler(message, get_loc, text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin(message):
    admin_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')

    bot.send_message(admin_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    bot.register_next_step_handler(message, admin_action)


def admin_action(message):
    if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                          '–ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–ª-–≤–æ, —Ü–µ–Ω–∞, —Ñ–æ—Ç–æ\n\n'
                                          '–ü—Ä–∏–º–µ—Ä:\n'
                                          '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏, –≤–∫—É—Å–Ω–∏, 500, 14000, https://kartoxa.jpg\n\n'
                                          '<a href="https://postimages.org/">–°–∞–π—Ç</a> –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.\n'
                                          '–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!',
                         parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_pr)

    elif message.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å ID
        products = database.get_all_pr()
        text = '<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n'
        for pr in products:
            text += f'üÜî <b>{pr[0]}</b> | {pr[1]} | –û—Å—Ç–∞—Ç–æ–∫: {pr[3]}\n'
        text += '\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:'

        bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, delete_pr)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫.')


def get_pr(message):
    admin_id = message.from_user.id
    try:
        if database.add_pr_to_db(*message.text.split(', ')):
            bot.send_message(admin_id, '‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
        else:
            bot.send_message(admin_id, '‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.')
    except Exception as e:
        bot.send_message(admin_id, f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}')


def delete_pr(message):
    try:
        pr_id = int(message.text)
        database.delete_product(pr_id)
        bot.send_message(message.chat.id, f'üóëÔ∏è –¢–æ–≤–∞—Ä —Å ID {pr_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data –Ω–∞ —Ç–æ–≤–∞—Ä
@bot.callback_query_handler(lambda call: int(call.data) in [i[0] for i in database.get_all_pr()])
def choose_product(call):
    user_id = call.message.chat.id
    pr_info = database.get_exact_pr(int(call.data))
    bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
    bot.send_photo(user_id, photo=pr_info[-1], caption=f'<b>{pr_info[1]}</b>\n\n'
                                                       f'<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{pr_info[2]}\n'
                                                       f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: </b>{pr_info[3]}\n'
                                                       f'<b>–¶–µ–Ω–∞: </b>{pr_info[4]} —Å—É–º\n',
                   parse_mode='HTML', reply_markup=buttons.choose_pr_count(pr_info[3]))
    users[user_id] = {'pr_name': pr_info[0], 'pr_count': 1}


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True)